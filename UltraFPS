local player = game.Players.LocalPlayer
local gui = Instance.new("ScreenGui")
gui.Name = "UltraFPSGui"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 60)
frame.Position = UDim2.new(0.2, 0, 0.05, 0)
frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
frame.Active = true
frame.Parent = gui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, -30, 0.5, 0)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Ultra FPS [OFF]"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.SourceSansBold
title.TextScaled = true
title.Parent = frame

local toggle = Instance.new("TextButton")
toggle.Size = UDim2.new(0.6, -5, 0.5, -5)
toggle.Position = UDim2.new(0, 5, 0.5, 0)
toggle.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
toggle.Text = "Toggle"
toggle.TextColor3 = Color3.new(1, 1, 1)
toggle.Font = Enum.Font.SourceSansBold
toggle.TextScaled = true
toggle.Parent = frame

local close = Instance.new("TextButton")
close.Size = UDim2.new(0.3, -5, 0.5, -5)
close.Position = UDim2.new(0.7, 0, 0.5, 0)
close.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
close.Text = "X"
close.TextColor3 = Color3.new(1, 1, 1)
close.Font = Enum.Font.SourceSansBold
close.TextScaled = true
close.Parent = frame

local fpsEnabled = false
local optimized = {}

local function OptimizeObject(v)
	if optimized[v] then return end
	optimized[v] = true
	if v:IsA("BasePart") then
		v.Material = Enum.Material.Plastic
		v.Color = Color3.fromRGB(180,180,180)
		v.Reflectance = 0
		pcall(function() v.CastShadow = false end)
	end
	if v:IsA("MeshPart") then
		v.TextureID = ""
		v.Material = Enum.Material.Plastic
		v.Color = Color3.fromRGB(180,180,180)
	end
	if v:IsA("Decal") or v:IsA("Texture") then v.Transparency = 1 end
	for _, c in pairs(v:GetChildren()) do
		if c:IsA("SurfaceAppearance") then c:Destroy() end
	end
	if v:IsA("SpecialMesh") or v:IsA("FileMesh") then v.TextureId = "" end
	if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") or v:IsA("Smoke") or v:IsA("Sparkles") then
		v.Enabled = false
		if v:IsA("ParticleEmitter") then
			v.Rate = 0
			v.Lifetime = NumberRange.new(0)
		end
	end
	if v:IsA("Explosion") then
		v.BlastPressure = 1
		v.BlastRadius = 1
	end
end

local function OptimizeGame()
	local g = game
	local w = g.Workspace
	local l = g.Lighting
	local t = w.Terrain
	t.WaterWaveSize = 0
	t.WaterWaveSpeed = 0
	t.WaterReflectance = 0
	t.WaterTransparency = 1
	l.GlobalShadows = false
	l.FogEnd = 9e9
	l.Brightness = 0
	settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
	for _, v in pairs(g:GetDescendants()) do
		OptimizeObject(v)
	end
	for _, e in pairs(l:GetChildren()) do
		if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
			e.Enabled = false
		end
	end
end

game.DescendantAdded:Connect(function(v)
	if fpsEnabled then OptimizeObject(v) end
end)

player.CharacterAdded:Connect(function(char)
	if fpsEnabled then
		for _, v in pairs(char:GetDescendants()) do
			OptimizeObject(v)
		end
	end
end)

local function ToggleFPS()
	fpsEnabled = not fpsEnabled
	if fpsEnabled then
		title.Text = "Ultra FPS [ON]"
		OptimizeGame()
	else
		title.Text = "Ultra FPS [OFF]"
	end
end

toggle.MouseButton1Click:Connect(ToggleFPS)
close.MouseButton1Click:Connect(function() frame.Visible = false end)

local UserInputService = game:GetService("UserInputService")
local dragging, dragInput, dragStart, startPos

local function update(input)
	local delta = input.Position - dragStart
	frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
		startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position
		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

frame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)
